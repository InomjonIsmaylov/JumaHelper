//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IDuaRequestClient {
    requestForDua(request: DuaRequestDto): Observable<DuaRequestDto>;
}

@Injectable({
    providedIn: 'root'
})
export class DuaRequestClient implements IDuaRequestClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    requestForDua(request: DuaRequestDto): Observable<DuaRequestDto> {
        let url_ = this.baseUrl + "/api/DuaRequest/RequestForDua";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestForDua(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestForDua(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DuaRequestDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DuaRequestDto>;
        }));
    }

    protected processRequestForDua(response: HttpResponseBase): Observable<DuaRequestDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DuaRequestDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export interface IDuaTypeClient {
    returnAll(): Observable<DuaRequestTypeDto[]>;
    createNewType(name: string): Observable<DuaRequestTypeDto>;
}

@Injectable({
    providedIn: 'root'
})
export class DuaTypeClient implements IDuaTypeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    returnAll(): Observable<DuaRequestTypeDto[]> {
        let url_ = this.baseUrl + "/api/DuaType/ReturnAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReturnAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReturnAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DuaRequestTypeDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DuaRequestTypeDto[]>;
        }));
    }

    protected processReturnAll(response: HttpResponseBase): Observable<DuaRequestTypeDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DuaRequestTypeDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createNewType(name: string): Observable<DuaRequestTypeDto> {
        let url_ = this.baseUrl + "/api/DuaType/CreateNewType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(name);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateNewType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateNewType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DuaRequestTypeDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DuaRequestTypeDto>;
        }));
    }

    protected processCreateNewType(response: HttpResponseBase): Observable<DuaRequestTypeDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DuaRequestTypeDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class DuaRequestDto implements IDuaRequestDto {
    id?: number;
    requestType?: DuaRequestTypeDto | undefined;
    owner?: DuaRequestOwnerDto | undefined;
    requestTo?: DuaRequestTo;
    description?: string | undefined;

    constructor(data?: IDuaRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.requestType = _data["requestType"] ? DuaRequestTypeDto.fromJS(_data["requestType"]) : <any>undefined;
            this.owner = _data["owner"] ? DuaRequestOwnerDto.fromJS(_data["owner"]) : <any>undefined;
            this.requestTo = _data["requestTo"] ? DuaRequestTo.fromJS(_data["requestTo"]) : <any>undefined;
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): DuaRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new DuaRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["requestType"] = this.requestType ? this.requestType.toJSON() : <any>undefined;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["requestTo"] = this.requestTo ? this.requestTo.toJSON() : <any>undefined;
        data["description"] = this.description;
        return data;
    }
}

export interface IDuaRequestDto {
    id?: number;
    requestType?: DuaRequestTypeDto | undefined;
    owner?: DuaRequestOwnerDto | undefined;
    requestTo?: DuaRequestTo;
    description?: string | undefined;
}

export class DuaRequestTypeDto implements IDuaRequestTypeDto {
    id?: number;
    name?: string;
    duaRequests?: DuaRequestDto[];

    constructor(data?: IDuaRequestTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["duaRequests"])) {
                this.duaRequests = [] as any;
                for (let item of _data["duaRequests"])
                    this.duaRequests!.push(DuaRequestDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DuaRequestTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new DuaRequestTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.duaRequests)) {
            data["duaRequests"] = [];
            for (let item of this.duaRequests)
                data["duaRequests"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDuaRequestTypeDto {
    id?: number;
    name?: string;
    duaRequests?: DuaRequestDto[];
}

export class DuaRequestOwnerDto implements IDuaRequestOwnerDto {
    id?: number;
    name?: string;
    fatherName?: string | undefined;
    duaRequests?: DuaRequestDto[];

    constructor(data?: IDuaRequestOwnerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.fatherName = _data["fatherName"];
            if (Array.isArray(_data["duaRequests"])) {
                this.duaRequests = [] as any;
                for (let item of _data["duaRequests"])
                    this.duaRequests!.push(DuaRequestDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DuaRequestOwnerDto {
        data = typeof data === 'object' ? data : {};
        let result = new DuaRequestOwnerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["fatherName"] = this.fatherName;
        if (Array.isArray(this.duaRequests)) {
            data["duaRequests"] = [];
            for (let item of this.duaRequests)
                data["duaRequests"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDuaRequestOwnerDto {
    id?: number;
    name?: string;
    fatherName?: string | undefined;
    duaRequests?: DuaRequestDto[];
}

export class DuaRequestTo implements IDuaRequestTo {
    name?: string | undefined;
    affiliation?: Affiliation;

    constructor(data?: IDuaRequestTo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.affiliation = _data["affiliation"];
        }
    }

    static fromJS(data: any): DuaRequestTo {
        data = typeof data === 'object' ? data : {};
        let result = new DuaRequestTo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["affiliation"] = this.affiliation;
        return data;
    }
}

export interface IDuaRequestTo {
    name?: string | undefined;
    affiliation?: Affiliation;
}

export enum Affiliation {
    Father = 10,
    Mother = 20,
    Parents = 30,
    Children = 40,
    Brother = 50,
    Sister = 60,
    Siblings = 70,
    Relative = 80,
    Friend = 90,
    Teacher = 100,
    Other = 500,
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}